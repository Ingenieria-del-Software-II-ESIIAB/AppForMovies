@page "/rentals/createrental"
@using AppForMovies.Web.API
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authorization
@using System.Text.Json
@using AppForMovies.Web.Components.Shared
@inject AppForMovies.Web.API.AppForMoviesAPIClient apiservice


@inject RentalStateContainer rentalState
@inject NavigationManager Navigation

@attribute [Authorize]

<h3>Rental</h3>
<EditForm Model="rental" OnValidSubmit="OpenDialog">
    @*it checks user's inputs such as required attributes, that were defined in PurchaseForCreateDTO*@
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="row g-2">
        <div class="col-md">
            <div class="form-floating mb-3">
                <InputText @bind-Value="rental.CustomerNameSurname" class="form-control" id="NameSurname" />
                <label for="NameSurname">Name and Surname</label>
            </div>
        </div>
        <div class="col-md">
            <div class="form-floating mb-3">
                <InputText @bind-Value="rental.DeliveryAddress" class="form-control" id="DeliveryAddress" />
                <label for="DeliveryAddress">Delivery Address</label>
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col">
            <div class="form-floating">
                @*a dropdown for selecting the payment method*@
                <InputSelect class="form-select" @bind-Value="@rental.PaymentMethod" id="PaymentMethod">
                    <option value="@PaymentMethodTypes.CreditCard" default> CreditCard</option>
                    <option value="@PaymentMethodTypes.PayPal" > PayPal</option>
                    <option value="@PaymentMethodTypes.Cash" > Cash</option>
                </InputSelect>
                <label for="PaymentMethod">Payment Method</label>
            </div>
        </div>
        <div class="col-md">
            <div class="form-floating">
                @*this button will be disabled if there are no movies in the shopping cart*@
                <button class="btn btn-primary" type="submit" id="Submit">
                    Rent your movies
                </button>
            </div>
        </div>
    </div>
</EditForm>
<p></p>
<h4>Rental detail</h4>
<p><b>Date from:</b> @rental.RentalDateFrom.ToString("dd/MM/yyyy") <b>to:</b> @rental.RentalDateTo.ToString("dd/MM/yyyy")</p>
<p>
    <b>Total price:</b> @rental.TotalPrice €                 
    <button class="btn btn-outline-primary" type="submit" @onclick="ModifyRentalItems" id="ModifyMovies">
        Modify movies
    </button>
</p>
    <div class="mh-100 table-responsive">
        <table class="table table-condensed table-hover" id="TableOfRentalItems">
            <thead>
                <tr>
                    <th>Title</th>
                    <th>Genre</th>
                    <th>Price For Renting</th>
                    <th>Description</th>
                </tr>
            </thead>
            <tbody>
            @foreach (var item in rental.RentalItems)
            {
                <tr id="MovieData_@item.Title">
                    <td>@item.Title</td>
                    <td>@item.Genre</td>
                    <td>@item.PriceForRenting</td>
                    <td><InputText @bind-Value="item.Description" class="form-control" id="@($"description_{item.MovieID}")" /></td>
                </tr>
            }
        </tbody>
    </table>
</div>


@*a modal popup dialog for checking if user wants to proceed to purchase*@
@if (DialogIsOpen)
{
    <Dialog Caption="Rental movies"
    Message="Do you want to proceed to rent the selected movies?"
    OnClose="@OnDialogClose"
    Type=Dialog.Category.SaveNot>
    </Dialog>
}
@*this is a another modal popup dialog to inform user about problems*@
@if (DialogOKIsOpen)
{
    <Dialog Caption="Error!"
    Message="@DialogOKMessage"
    OnClose="@OnDialogOKClose"
    Type=Dialog.Category.Okay>
    </Dialog>
}


@code {
    private RentalForCreateDTO rental => rentalState.Rental;

    private bool DialogIsOpen;
    private bool OkCancel = false; //ok=true cancel=false
    private void OpenDialog()
    {
        DialogIsOpen = true;
    }

    private void ModifyRentalItems()
    {
        Navigation.NavigateTo("/rentals/listmoviesforrenting");
    }

    private async Task OnDialogClose(bool isOk)
    {


        OkCancel = isOk;
        DialogIsOpen = false;
        if (OkCancel)
        {
            // Process the data introduced by the user if they are valid
            if (rental.RentalItems.Count() > 0)
            {
                try {
                    AppForMovies.Web.API.RentalForCreateDTO rentalDTO = new API.RentalForCreateDTO()
                    {
                        CustomerNameSurname=rental.CustomerNameSurname,
                        CustomerUserName=rental.CustomerUserName,
                        DeliveryAddress=rental.DeliveryAddress,
                        PaymentMethod=(API.PaymentMethodTypes)rental.PaymentMethod,
                        RentalDateFrom=rental.RentalDateFrom,
                        RentalDateTo=rental.RentalDateTo,
                        RentalItems= rental.RentalItems.Select(ri=>new API.RentalItemDTO()
                        {
                            MovieID=ri.MovieID, Title=ri.Title, Genre=ri.Genre,PriceForRenting=ri.PriceForRenting, Description=ri.Description
                        }
                        ).ToList(),
                    };
                    var rented = await apiservice.CreateRentalAsync(rentalDTO);
                    rentalState.RentalProcessed();
                    Navigation.NavigateTo($"/rentals/detailrental/?RentalID={rented.Id}");
                }
                catch (AppForMovies.Web.API.ApiException<AppForMovies.Web.API.ValidationProblemDetails> apiexceptionvalidation)
                {
                    //we need to inform user that there was a 400 error
                    string message = "Error while processing your request, please try again later!";

                    if (apiexceptionvalidation.Result.Errors.Values != null)
                    {
                        message = "";
                        foreach (var errors in apiexceptionvalidation.Result.Errors.Values)
                            //https://learn.microsoft.com/en-us/dotnet/api/system.string.join?view=net-7.0
                            message = string.Join("(*) ", message, string.Join(" (*) ", errors));
                    }
                    OpenDialogOK(message);
                }
                catch (AppForMovies.Web.API.ApiException apiexception)
                {
                    //we need to inform user that there was some other error while processing the request
                    string message = "Error while processing your request, please try again later!";
                    OpenDialogOK(message);
                }
            }
        }
    }

    private bool DialogOKIsOpen;
    private string DialogOKMessage;
    private void OpenDialogOK(string message)
    {
        DialogOKIsOpen = true;
        DialogOKMessage = message;
    }
    private async Task OnDialogOKClose()
    {
        DialogOKIsOpen = false;
    }

    protected override async Task OnInitializedAsync()
    {

        if (authenticationState is not null)
        {
            var authState = await authenticationState;
            var user = authState?.User;

            if (user is not null)
            {
                if (user.Identity is not null && user.Identity.IsAuthenticated)
                {
                    rental.CustomerUserName= user.Identity.Name;
                }
            }
        }
    }


    [CascadingParameter]
    private Task<AuthenticationState>? authenticationState { get; set; }


}
